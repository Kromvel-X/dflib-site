[#window]
== Window Operations

Window operations are somewhat close to "group", except they usually preserve the rows of the original
`DataFrame` and may add extra columns with values calculated from "windows" of data relative to a given row. We'll use
the following `DataFrame` to demonstrate how window operations work:

----
name             amount date
---------------- ------ ----------
Jerry Cosin        8000 2024-01-15
Juliana Walewski   8500 2024-01-15
Joan O'Hara        9300 2024-01-15
Jerry Cosin        8800 2024-02-15
Juliana Walewski   8500 2024-02-15
Joan O'Hara        9500 2024-02-15
----

A window is created by calling `over()` on the `DataFrame`:
[source,java,indent=0]
----
include::${src-dir}/WindowTest.java[tags=window]
----

Here is a full operation that adds a "max_salary" column to each employee:

[source,java,indent=0]
----
include::${src-dir}/WindowTest.java[tags=windowPartition]
----
<1> Defines DataFrame "partitioning". Calculation window for each row will be all the rows in the same partition
<2> Defines a new column and an aggregating expression to produce values.

----
name             amount date       max_salary
---------------- ------ ---------- ----------
Jerry Cosin        8000 2024-01-15       8800
Juliana Walewski   8500 2024-01-15       8500
Joan O'Hara        9300 2024-01-15       9500
Jerry Cosin        8800 2024-02-15       8800
Juliana Walewski   8500 2024-02-15       8500
Joan O'Hara        9500 2024-02-15       9500
----

Partitioning in the example above is similar to "group" in `GroupBy`. Another way to define windows is via a `range(..)`
method that allows to build window with fixed offset relative to each row.


_TODO_
