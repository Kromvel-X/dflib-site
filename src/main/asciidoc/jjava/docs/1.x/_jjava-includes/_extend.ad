[#jupyter-aware-java-libs]
== Jupyter-Aware Java Libs

If you are writing a Java library that is specifically intended to work inside Jupyter, JJava provides a way for such
a library to execute custom code when the kernel loads it. E.g., for user convenience it might add some library-specific
`import` statements to the environment.

There are two pieces that need to be present in the library `.jar` for the above to work. The first is a Java class
implementing `org.dflib.jjava.jupyter.Extension` interface:

[source,java]
----
package my.lib;

import org.dflib.jjava.jupyter.Extension;
import org.dflib.jjava.jupyter.kernel.BaseKernel;

public class MyLibExtension implements Extension {

    @Override
    public void install(BaseKernel kernel) {
        try {
            kernel.eval("import my.lib.*"); // <1>
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
----
<1> Adds common imports related to the library.

The second piece is a file declaring this extension to the kernel. The file must have this exact location and
name - `META-INF/services/org.dflib.jjava.jupyter.Extension` - placed on the classpath (e.g. under `src/main/resources`
of a Maven project). It must contain a single line of text corresponding to the fully-qualified name of the Java class
above:

[source]
----
my.lib.MyLibExtension
----

As long as those two files are in the library jar, adding the `.jar` as a notebook dependency (e.g. as
`%maven my.lib:my-lib:1.0.0`) will cause an execution of the `install(..)` method.

NOTE: JJava core itself provides an extension that implicitly loads common imports like `java.io`, `java.time`, etc.
in every notebook.

NOTE: A complimentary mechanism to extensions is a custom JShell script added via `JJAVA_STARTUP_SCRIPT` environment
variable. The advantage of extensions is that they load library-specific code when that library is in use in a notebook.

To disable all custom extensions and the JJava core extension for a given Jupyter process, you can set
`JJAVA_LOAD_EXTENSIONS` variable to `0`:

----
export JJAVA_LOAD_EXTENSIONS=0
----
