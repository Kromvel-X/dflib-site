[#column_ops]
== Column Operations

With a few exceptions, operations on DataFrame data are performed on a subset of rows and columns. Such operations
begin with defining a `ColumnSet` or a `RowSet` and then applying an operation. Let's first look at columns...

=== Picking Columns

Here is a simple example of how to pick two columns from a DataFrame by *column name*, and return a new DataFrame with just those two columns:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=cols]
----

<1> Define a `ColumnSet` of two columns matching provided names.
The order of columns in the `ColumnSet` matches the order of column names passed to this method.
<2> Return a new DataFrame matching the `ColumnSet`. More on this in the next chapter.

----
last     first
-------- -------
Cosin    Jerry
O'Hara   Joan
----

NOTE: Passing columns in a specific order to the `cols(..)` method allowed us to reorder the columns in the result.

In the example above, the columns were picked by name. There are a few other ways to define a `ColumnSet`, as described
below.

By *column positions*:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsByPos]
----

By a *custom predicate*:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsByPredicate]
----
This form of `cols(..)` does not allow to reorder the columns. The resulting columns will always follow the relative order of the original DataFrame:
----
first   last
------- --------
Jerry   Cosin
Joan    O'Hara
----

By specifying column names (or positions) *excluded* from the `ColumnSet`. This also doesn't allow column reordering:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsExcept]
----

[#dynamic-column-selection]
By specifying no columns
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsAll]
----
Here, the returned DataFrame will be the same as the source DataFrame (i.e. `.cols()` is equivalent to selecting
all available columns), so it is fairly meaningless.

NOTE: "No-columns" picking style is a so-called *dynamic column selection*, when the result columns are resolved at a
later stage, based on the semantics of an operation applied to the `ColumnSet`. So in general, it is quite useful.

=== Renaming Columns

We saw how we can select a subset of columns. While doing that, we can also assign new names to all or some of the
columns via `selectAs(..)`.

Rename all column set columns:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectAs]
----
<1> Passing new names for the `ColumnSet` columns. The order of the names must correspond to the order of columns
in the `ColumnSet`, regardless of how it was defined.
----
last_name first_name
--------- ----------
Cosin     Jerry
Walewski  Juliana
----

Rename a subset of columns. Specifying names of all columns at once may not be practical for
"wide" column sets. Instead, you can pass a map of old to new names to `selectAs(..)` to rename just some columns.
Names not present in the map will remain unchanged:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectAsMap]
----
----
LAST_NAME first
--------- -------
Cosin     Jerry
O'Hara    Joan
----

Rename with a function, applied to all column names in turn. This is useful e.g. to convert all names to lower or
upper case:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectAsOp]
----
----
LAST   FIRST
------ -----
Cosin  Jerry
O'Hara Joan
----

=== Transforming Columns

In the above examples we performed DataFrame vertical slicing, columns reordering and renaming. In this chapter
we'll show how to transform column data.

Generating columns with expressions:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectExp]
----
<1> When defining the `ColumnSet`, we are allowed to specify columns that are not present in the original DataFrame, as
we are naming the result columns, not the source columns.
<2> For each column in the `ColumnSet`, there should be an expression that generates the column. The first expression
here transforms the data, the second simply picks a column from the source without modification.
----
first_middle last
------------ ------
Jerry M      Cosin
Joan         O'Hara
----

Generating columns row-by-row with a `RowMapper`:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectRowMapper]
----
There's also a way to generating columns row-by-row with per-column array of `RowToValueMapper`. It is not very different
from what we've seen so far, so we are leaving this as an exercise for the reader.

Generating columns by splitting other columns:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectArrays]
----
<1> `selectArrays(..)` takes an expression that splits a String with concatenated phones into a primary and secondary phone
numbers. If a split has more than 2 numbers, the rest are ignored, if less - nulls are used for the missing elements
----
primary_phone secondary_phone
------------- ---------------
111-555-5555  111-666-6666
222-555-5555  null
----

If you don't know the exact number of phones, but would like to
capture them all in separate columns, simply do not specify any explicit column names when defining a `ColumnSet` (as
mentioned in the <<dynamic-column-selection,dynamic column selection>>). As many columns as needed to fit the longest
collection of phone numbers will be generated on the fly, and the names will be assigned dynamically:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectArraysUnlim]
----
<1> Not specifying any columns will result in split columns generated dynamically.
----
0            1            2
------------ ------------ ------------
111-555-5555 111-666-6666 111-777-7777
222-555-5555 null         null
----

Another flavor of `selectArrays(..)` is `selectIterables(..)` that takes an `Exp<? extends Iterable>` and expands it
into columns, but otherwise works the same way.

=== Merging Columns
All the `ColumnSet` operations demonstrated so far resulted in discarding the source DataFrame, and returning only the
columns defined within the set. But there are many situations when we would like to recombine `ColumnSet` with the
original DataFrame. E.g., when you are doing data cleanup or "enriching" a data set. In fact, all the renaming and
data transformation operations that we just discussed can be executed as "merge" operations (as opposed to "select").
All the `ColumnsSet` methods that do not start with `select...` are performing a merge with the source DataFrame.

An example of cleaning up a data set and adding a new column:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsMap]
----
<1> An expression that capitalizes the first letter of the name
<2> The columns we are going to generate or transform
<3> Instead of `select(..)`, use `map(..)` to merge to the original DataFrame

Now let's check the result. The first two columns in the `ColumnSet` ("last", "first") were  already present in the
DataFrame, so they got replaced with the cleaned up versions. The last column ("full") was new, so it was appended to
the right side of the DataFrame:
----
first last   middle full
----- ------ ------ -----------
Jerry Cosin  M      jerry cosin
Joan  O'Hara null   Joan O'Hara
----

General merge rules:

* Merging is done *by name*. DataFrame's columns with matching names are replaced with new versions, columns that
are not a part of the `ColumnSet` are left unchanged, and columns in the `ColumnSet`, but not in the DataFrame, are
appended on the right.
* The order of the existing columns in the `ColumnSet` has no effect on the order of replaced columns (i.e. they are
placed in their original positions). The relative order of appended columns is respected.
* All transformation operations (such as expressions in our example) are applied to the original DataFrame columns
(and can reference those outside the `ColumnSet`), but do not see the transformed columns. This is why there is a
lowercase name in the resulting "full" column.

What if we want to ensure that all of the `ColumnSet` columns are appended, and no replacement of the original columns
occurs? For this you can manually specify `ColumnSet` labels that are not found in the source DataFrame, or you can use
`DataFrame.colsAppend(..)`, and DFLib itself will ensure that the names are unique, appending `_` to each label until
it doesn't overlap with anything already in the DataFrame:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsAppendMap]
----
<1> Using `colsAppend(..)` instead of `cols()` ensures that both pre- and post-cleanup columns are preserved.

----
first last   middle last_  first_
----- ------ ------ ------ ------
jerry cosin  M      Cosin  Jerry
Joan  O'Hara null   O'Hara Joan
----

NOTE: Since we've already discussed various flavors of column renaming and transformation in the context of `select(..)`
operation, we leave it as an exercise for the user to explore the remaining similar kinds of `as(..)` and `map(..)`.

=== Filling Nulls

As a part of a dataset cleanup effort, you might want to replace `null` values with something meaningful. For this you
may have to guess or maybe extrapolate the existing values based on some internal knowledge of the dataset. To help with
this task, `ColumnSet` provides a few methods discussed here.

Filling nulls with a constant value:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=fillNulls]
----

----
c1 c2
-- --
a1 a2
X  X
b1 b2
----

Filling nulls with values adjacent to the cells with nulls:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=fillNullsForwardBackwards]
----
<1> `fillNullsForward(..)` takes a non-null value preceding the null cell and uses it to replace nulls.
<2> `fillNullsBackwards(..)` uses the first non-null value following the null cell.

----
c1 c2
-- --
a1 a2
b1 a2
b1 b2
----

Finally, there's a way to fill nulls from another `Series` object used as a "template" or a "mask" :
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=fillNullsFromSeries]
----

----
c1 c2
-- --
a1 a2
B  B
b1 b2
----

NOTE: The "mask" Series can be longer (or shorter) than the DataFrame height. Values are aligned by position starting at zero.

=== Dropping Columns

To get rid of certain columns in a DataFrame, you can either select the columns you would want to drop or select
the columns you'd want to remain:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsDrop]
----
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnOpsTest.java[tags=colsSelectToDrop]
----
In both cases, the result is the same:
----
first last
----- ------
Jerry Cosin
Joan  O'Hara
----







