== Shaping, Selecting Rows and Columns

There are various ways to reshape a DataFrame by adding / removing rows and columns.

=== Adding Columns

There are a few ways to add columns to a DataFrame:

* Add a column by calculating cell values, based on data from other columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=addColumnFromRow]
----

<1> New column name
<2> Operation to produce values for the new column from the existing row. `r` is a special `RowProxy` object,
providing access to the row being processed.

----
first   last      full
------- --------- -----------------
Jerry   Cosin     Jerry Cosin
Alanson Gabrielly Alanson Gabrielly
Joan    O'Hara    Joan O'Hara
3 rows x 3 columns
----

* Add multiple columns in a single method call (generally faster than adding them individually) :

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=addColumnsFromRow]
----

----
first   last      last_initial first_initial
------- --------- ------------ -------------
Jerry   Cosin     C            J
Alanson Gabrielly G            A
Joan    O'Hara    O            J
3 rows x 4 columns
----

* Adding a Series. If you already have a Series object of the size matching the DataFrame height, it can be added as a
column. E.g. we can add a column that will number DataFrame rows:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=addColumnFromSeries]
----
<1> A `Series` that produces a sequence of numbers from `0` to `df.height()`.
----
first   last      number
------- --------- ------
Jerry   Cosin          0
Alanson Gabrielly      1
Joan    O'Hara         2
3 rows x 3 columns
----

For this particular task (adding row numbers) there's a shortcut that does the same thing as the code above:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=addRowNumbers]
----

=== Deleting Columns

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=deleteColumns]
----
<1> Drop one or more columns from the DataFrame.
----
last
---------
Cosin
Gabrielly
O'Hara
3 rows x 1 column
----

=== Renaming Columns

Often DataFrames come from external sources (like CSV files or database tables) with column names, that require further
cleanup to clarify their meaning within the application. There are a number of ways to rename the columns:

* Rename columns individually:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=renameColumn]
----

----
first_name last_name
---------- ---------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Specify the new names of _all_ columns at once. This may not be practical for a large number of columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=renameColumns]
----

----
first_name last_name
---------- ---------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Rename using a map of old names to new names. Names not present in the map will remain unchanged:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=renameColumns_Map]
----

----
first_name last
---------- ------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Rename using a function, applied to all column names in turn. This is useful e.g. to convert all names to lower case:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=renameColumns_ToLowerCase]
----

----
first last
----- ------
Jerry Cosin
Joan  O'Hara
2 rows x 2 columns
----

=== Selecting Columns

`selectColumns(..)` method allows to do a few things at once: select a subset of columns in the DataFrame,
reorder columns and even duplicate columns.

* Selecting by column name. In the example below we are getting rid of the "middle" column and reordering "first" and
"last" columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=selectAndReorderColumns]
----

----
last      first
--------- -------
Cosin     Jerry
Gabrielly Alanson
O'Hara    Joan
3 rows x 2 columns
----

* Selecting by column position instead of the name:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=selectAndReorderColumns_ByIndex]
----

=== Selecting Rows

* Selecting a subset of rows by position. As there are no row labels in DFLib yet, selecting by position is the only
"direct" selection option. Just like with column selection, it allows to duplicate rows by referencing the same
position more than once, as well as reorder rows:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=selectRows]
----

----
first last
----- ------
Joan  O'Hara
Jerry Cosin
Jerry Cosin
3 rows x 2 columns
----

[#selectRowsIndex]
* Selecting using an index. You may precalulate an "index" (an `IntSeries`) of row positions and then use it for row
selection. An index often comes from applying a condition to a `Series` that is not a part of the `DataFrame`. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=selectRowsIndex]
----

<1> Index is calculated by applying a condition to a Series, that is not a part of the DataFrame, whose rows we are
selecting.

----
first last
----- -----
Jerry Cosin
1 row x 2 columns
----

=== Filtering Rows

A very common form of row selection is "filtering", i.e. returning a subset of rows that match a conditional expression.
Unlike `selectRows`, `filter(..)` methods do not require direct references to row positions. Filtering would not allow to
reorder or duplicate rows. The following flavors of filtering are available:

* `filter(..)` with column condition:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=filterByColumn]
----

----
first last
----- ------
Jerry Cosin
Joan  O'Hara
2 rows x 2 columns
----

* `filter(..)` with full row condition:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=filterByRow]
----

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

* `filter(..)` with `BooleanSeries` "index". We've already seen how to select rows using <<selectRowsIndex, an
IntSeries index>>. It allowed to separate index calculation from the DataFrame whose rows we are filtering. Along the
same lines we can use `BooleanSeries` "index" as a filter condition. Such index is usually a result of a prior logical
operation between Series. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ShapingExample.java[tags=filterByBoolean]
----

<1> Index is calculated by comparing a Series of names with DataFrame column of first names.

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----