== Main Data Structures

The two essential DFLib classes are `Series` and `DataFrame`. `Series` is a 1-dimensional array-like object, and `DataFrame`
is a 2-dimensional table-like object. Columns in a DataFrame are stored as Series. Additionally we will discuss
`Index` object that stores DataFrame column names.

Both DataFrame and Series (and Index) are fully _immutable_, so all operations on them return a new instance. Behind
the scenes the library shares as much data as possible between instances, so copying these objects does not cause
significant performance degradation, and in turn makes DFLib fully thread-safe, with multiple concurrent operations
possible on the same data structure. Also immutability means that you can have full snapshots of your data at each
step of a transformation, simplifying debugging and auditing of data pipelines.


=== Series

`Series` is the simplest of the two data structures. You can think of it as a wrapper around an array of values.
You can use `Series` to model sequences of data such as timestamps in a time series. Series object is parameterized for
the type of data that it holds. So there can be e.g. `Series<String>` or a `Series<LocalDate>`. There is also an
important category of "primitive" Series (`IntSeries`, `LongSeries`, `DoubleSeries`, `BooleanSeries`) that are optimized
for memory use and arithmetic operations. While this would be less efficient, they can also be used as Series of a
corresponding wrapper object type (e.g. `IntSeries` is also a `Series<Integer>`).

`Series` object is important as a building block of DataFrame, but it also defines a number of useful data
manipulation and transformation operations on its own. Those will be covered in the following chapters. Here we'll
discuss how to create Series.

==== Creating Series from Arrays

`Series` can be created using static `forData` method on the `Series` interface:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SeriesCreateExample.java[tags=create]
----

----
a
bcd
...
g
4 elements
----

Primitive Series classes have their own factory methods. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SeriesCreateExample.java[tags=createInt]
----

==== Creating Series Incrementally

If we don't have a full array of data to start with, and instead have code producing a sequence of
values of unpredictable length, we can use special mutable "accumulators" to store the sequence and then produce a
Series out of it. E.g. the following example reads data from an InputStream line by line as Strings:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SeriesCreateExample.java[tags=createIncrementally]
----

Similarly there are `IntAccumulator`, `LongAccumulator`, etc.

=== DataFrame

`DataFrame` is an in-memory table with rows and columns. Each column has a name, and is represented as a `Series` object.
DataFrame can contain columns of different kinds and is not parameterized for a single type.

There are a few ways to create a DataFrame. Here we'll show "builder" API to convert arrays, Streams, Collections,
Series and other in-memory data into DataFrames.

NOTE: Alternatively a DataFrame can be loaded from (and saved to) a <<jdbc,database>> or a <<csv,CSV file>>.
Those data sources are discussed in separate documentation chapters.

First example - adding data row by row:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/DataFrameCreateExample.java[tags=createRowAtATime]
----
<1> Builder is created from column names
<2> Passing individual rows one by one

The resulting DataFrame looks like this:
----
name   age
------ ---
Joe    18
Andrus 45
Joan   32
3 rows x 2 columns
----

Another example - if we have a single array and need to "fold" it into a two-dimensional DataFrame row-by-row:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/DataFrameCreateExample.java[tags=createFoldByRow]
----
<1> Builder is created from column names
<2> Passing a varargs array of values, that is folded to match the specified number of columns, row by row.

Same, but folding column-by-column:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/DataFrameCreateExample.java[tags=createFoldByColumn]
----
You can also create DataFrames from Collections and Streams (folded either by row or by column). Here is an example
of how to use Streams of primitive ints, creating a DataFrame made of memory-efficient `IntSeries` columns:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/DataFrameCreateExample.java[tags=createFromIntStream]
----

----
col1 col2
---- ----
   0 5000
   1 5001
   2 5002
...
4997 9997
4998 9998
4999 9999
5000 rows x 2 columns
----

Finally, a DataFrame can be created from an array of Series, each Series representing a column:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/DataFrameCreateExample.java[tags=createFromSeries]
----

This is the fastest and most efficient way to make a DataFrame, as an array of Series is how it is structured internally.

Now that we've discussed how to create Series and DataFrames, we'll talk about <<printers,printing their contents>>,
and then will continue to the chapters that describe data operations.

[#index]
=== Index

`Index` is somewhat similar to Series. It stores a sequence of String labels, corresponding to column labels in a
DataFrame it is attached to. While you normally won't need to create or manipulate Index outside of a DataFrame, you
may use it to access DataFrame columns labels.

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/MainDataStructuresExample.java[tags=indexGetLabels]
----

<1> Access DataFrame index and read label names.
