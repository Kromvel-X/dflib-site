== Main Data Structures

The two essential DFLib classes are `Series` and `DataFrame`. `Series` is a 1-dimensional array-like object, and `DataFrame`
is a 2-dimensional table-like object. Columns in a DataFrame are stored as Series. Additionally, we will discuss
`Index` object that stores DataFrame column names.

Both DataFrame and Series (and Index) are fully _immutable_, so all operations on them return a new instance. Behind
the scenes the library shares as much data as possible between instances, so copying these objects does not cause
significant performance degradation, and in turn makes DFLib fully thread-safe, with multiple concurrent operations
possible on the same data structure. Also, immutability means that you can have full snapshots of your data at each
step of a transformation, simplifying debugging and auditing of data pipelines.


=== Series

`Series` is the simplest of the two data structures. You can think of it as a wrapper around an array of values.
You can use `Series` to model sequences of data such as timestamps in a time series. Series object is parameterized for
the type of data that it holds. So there can be `Series<String>` or a `Series<LocalDate>`, etc. There is also an
important category of "primitive" Series (`IntSeries`, `LongSeries`, `DoubleSeries`, `BooleanSeries`) that are optimized
for memory use and arithmetic operations. Of course, each primitive Series can also pose as Series of a corresponding
wrapper object type (e.g. `IntSeries` is also a `Series<Integer>`).

`Series` object is an important building block of DataFrame, but it defines a number of useful data
manipulation and transformation operations on its own. Those will be covered in the following chapters. Here we'll
discuss how to create Series.

==== Creation of Series from Arrays

`Series` can be created using static `ofXyz(..)` methods on the `Series` interface:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SeriesCreateTest.java[tags=create]
----

----
a
bcd
...
g
4 elements
----

Primitive Series classes have their own factory methods. E.g.:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SeriesCreateTest.java[tags=createInt]
----

==== Creation of Series By Element

If we don't have a data array or collection to start with, and instead somehow produce a sequence of
values of unpredictable length, we can use `Series.byElement()` API. E.g. the following example reads data from
an InputStream line by line as Strings:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SeriesCreateTest.java[tags=createIncrementally]
----
<1> Create Series "appender" that will accumulate values. For primitive Series you would use `Extractor.$int(..)`,
`Extractor.$long(..)` and so on
<2> Append values as they are read one-by-one

=== DataFrame

`DataFrame` is an in-memory table with rows and columns. Each column has a name, and is stored as a `Series` object.
DataFrame can contain columns of different kinds, so it is not parameterized for a single type.

There are a few ways to create a DataFrame. Here we'll show "builder" API to convert arrays, Streams, Collections,
Series and other in-memory data into DataFrames.

NOTE: More often than not, a DataFrame is not created manually and is instead loaded from (and saved to) an external
source, like a <<jdbc,database>> or a <<csv,CSV file>>. Those are discussed in separate documentation chapters.

First example, adding data row by row:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createRowAtATime]
----
<1> A special builder is created to append each row as a vararg array
<2> The builder creates an "appender" object. While here we are using the builder with default settings, it has extra
methods to configure capacity, data sampling, etc.
<3> Passing individual rows to the appender one-by-one

The resulting DataFrame looks like this:
----
name   age
------ ---
Joe    18
Andrus 49
Joan   32
----

A more general example - creating a DataFrame from a list of objects by "extracting" column data from object properties:
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createRowAtATimeFromObject]
----
<1> The builder is started with an array of Extractors. Each extractor generates its own column, filling it with a
corresponding object property.
<2> Specifying the names of the DataFrame columns. If omitted, column names are assigned automatically
<3> Creating a row-by-row appender
<4> Appending the list.

The resulting DataFrame looks like this:
----
name   age
------ ---
Joe    18
Andrus 49
Joan   32
----

Another example - a single-dimensional array can be "folded" into a DataFrame row-by-row:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createFoldByRow]
----
<1> Folding Builder is created
<2> Passing a varargs array of values, that is folded to match the specified number of columns, row by row.

Same, but folding column-by-column:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createFoldByColumn]
----
You can also create DataFrames from collections or Streams (folded either by row or by column). Here is an example
of how to use a Stream of primitive ints, creating a DataFrame made of memory-efficient `IntSeries` columns:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createFromIntStream]
----

----
col1 col2
---- ----
   0 5000
   1 5001
   2 5002
...
4997 9997
4998 9998
4999 9999
5000 rows x 2 columns
----

Finally, a DataFrame can be created from an array of Series, each Series representing a column:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/DataFrameCreateTest.java[tags=createFromSeries]
----

This is the most efficient way, as an array of Series is how each DataFrame is structured internally.

Now that we've discussed how to create Series and DataFrames, we'll talk about <<printers,printing their contents>>,
and then will continue to the chapters that describe data operations.

[#index]
=== Index

`Index` is somewhat similar to Series. It stores a sequence of String labels, corresponding to column labels in a
DataFrame it is attached to. While you normally won't need to create or manipulate Index outside a DataFrame, you
may use it to access DataFrame columns labels.

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/MainDataStructuresTest.java[tags=indexGetLabels]
----

<1> Access DataFrame index and read label names.
