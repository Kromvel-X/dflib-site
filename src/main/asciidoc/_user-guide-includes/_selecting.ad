[#selecting]
== Selecting Rows and Columns

Before analyzing or transforming a Series or a DataFrame, very often they need to be to narrowed down to just
the relevant data. API for selecting and filtering rows and columns described in this chapter helps with such task.

=== Selecting Columns

`selectColumns(..)` method allows to do a few things at once: select a subset of columns in the DataFrame,
reorder columns and even duplicate columns.

* Selecting by column name. In the example below we are getting rid of the "middle" column and reordering "first" and
"last" columns:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=selectAndReorderColumns]
----

----
last      first
--------- -------
Cosin     Jerry
Walewski  Juliana
O'Hara    Joan
3 rows x 2 columns
----

* Selecting by column position instead of the name:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=selectAndReorderColumns_ByIndex]
----

=== Deleting Columns

`DataFrame.dropColumn(..)` and `dropColumns(..)` are complimentary to `selectColumns(..)`. They allow to remove one or
more columns, but do not affect the order of the remaining columns.

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ColumnsManipulationTest.java[tags=deleteColumns]
----
<1> Drop one or more columns from the DataFrame.
----
last
---------
Cosin
Walewski
O'Hara
3 rows x 1 column
----

=== Selecting Rows by Position

* Selecting a subset of rows by position. As there are no row labels in DFLib yet, selecting by position is the only
"direct" selection option. Just like with column selection, it allows to duplicate rows by referencing the same
position more than once, as well as reorder rows:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=selectRows]
----

----
first last
----- ------
Joan  O'Hara
Jerry Cosin
Jerry Cosin
3 rows x 2 columns
----

[#selectRowsIndex]
* Selecting using an index. You may precalulate an "index" (an `IntSeries`) of row positions and then use it for row
selection. An index often comes from applying a condition to a `Series` that is not a part of the `DataFrame`. E.g.:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=selectRowsIndex]
----

<1> Index is calculated by applying a condition to a Series, that is not a part of the DataFrame, whose rows we are
selecting.

----
first last
----- -----
Jerry Cosin
1 row x 2 columns
----

=== Selecting Rows by Condition

Most often than not we don't know specific positions of rows we would like to select, and instead would like to evaluate
each row against some condition to decide whether it should be included in the result:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=selectByCondition]
----

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

NOTE: Unlike positional select this flavor does not allow to reorder or duplicate rows.

In the example above select condition was provided using the `Condition` object. You can also use a lambda function on a
single column:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=filterByColumn]
----
Or a lambda function on the entire row:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=filterByRow]
----

Finally, `BooleanSeries` can also serve as a filter condition (a "mask"). Such mask is usually a result of a prior logical
operation between Series. E.g.:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=filterByBoolean]
----

<1> Mask is calculated by comparing a Series of names with DataFrame column of first names.

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

=== Head and Tail

When you only need the "first N" or "last M" rows of a DataFrame (or values of a Series) you can use `head` and `tail`
operations. Here is how to get the top 2 rows of a DataFrame:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=headDataFrame]
----
<1> Returns a new DataFrame with two top rows of the original DataFrame.

----
first   last
------- ---------
Jerry   Cosin
Juliana Walewski
2 rows x 2 columns
----

`tail` works similarly, but returns the _last_ N rows:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=tailDataFrame]
----
----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

The argument to either `head(..)` or `tail(..)` can be negative. In which case the operation skips the specified number
of elements either from the top or from the bottom, and returns the remaining elements. The following code returns a
new DataFrame after skipping the two top rows of the original DataFrame:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SelectingTest.java[tags=negativeHeadDataFrame]
----

----
first  last
------ ---------
Joan  O'Hara
1 row x 2 columns
----

`Series` also define `head(..)` and `tail(..)` operations that do what you'd expect from them, returning first or last N
values.

NOTE: Unlike index operations on arrays and lists in Java, `head(..)` and `tail(..)` are safe in regards to bounds
checking. They DO NOT throw exceptions when the length parameter is bigger than DataFrame height (or Series size),
returning an empty DataFame (or Series) instead.

