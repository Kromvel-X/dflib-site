[#selecting]
== Selecting Rows and Columns

Before analyzing or transforming a Series or a DataFrame, very often they need to be to narrowed down to just
the relevant data. API for selecting and filtering rows and columns described in this chapter helps with such task.

=== Selecting Columns

`selectColumns(..)` method allows to do a few things at once: select a subset of columns in the DataFrame,
reorder columns and even duplicate columns.

* Selecting by column name. In the example below we are getting rid of the "middle" column and reordering "first" and
"last" columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=selectAndReorderColumns]
----

----
last      first
--------- ------
Cosin     Jerry
Gabrielly Amanda
O'Hara    Joan
3 rows x 2 columns
----

* Selecting by column position instead of the name:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=selectAndReorderColumns_ByIndex]
----

=== Deleting Columns

`DataFrame.dropColumns(..)` is an operation complimentary to `selectColumns`. It allows to remove one or more columns,
but does not allow to reorder the remaining columns.

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationExample.java[tags=deleteColumns]
----
<1> Drop one or more columns from the DataFrame.
----
last
---------
Cosin
Gabrielly
O'Hara
3 rows x 1 column
----

=== Selecting Rows

* Selecting a subset of rows by position. As there are no row labels in DFLib yet, selecting by position is the only
"direct" selection option. Just like with column selection, it allows to duplicate rows by referencing the same
position more than once, as well as reorder rows:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=selectRows]
----

----
first last
----- ------
Joan  O'Hara
Jerry Cosin
Jerry Cosin
3 rows x 2 columns
----

[#selectRowsIndex]
* Selecting using an index. You may precalulate an "index" (an `IntSeries`) of row positions and then use it for row
selection. An index often comes from applying a condition to a `Series` that is not a part of the `DataFrame`. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=selectRowsIndex]
----

<1> Index is calculated by applying a condition to a Series, that is not a part of the DataFrame, whose rows we are
selecting.

----
first last
----- -----
Jerry Cosin
1 row x 2 columns
----

=== Selecting Rows by Condition

A very common form of row selection is "filtering", i.e. producing a DataFrame with only rows that match a
conditional expression. This form of `selectRows` does not require direct references to row positions.
Also it does not allow to reorder or duplicate rows. The following flavors of filtering are available:

* `selectRows(..)` with column condition:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=filterByColumn]
----

----
first last
----- ------
Jerry Cosin
Joan  O'Hara
2 rows x 2 columns
----

* `selectRows(..)` with full row condition:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=filterByRow]
----

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

* `selectRows(..)` with `BooleanSeries` "index". We've already seen how to select rows using an <<selectRowsIndex,
IntSeries index>>. It allowed to perform index calculation outside the DataFrame, whose rows we are filtering.
`BooleanSeries` "index" (or "mask") can similarly serve as a filter condition. Such index is usually a result of a prior
logical operation between Series. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=filterByBoolean]
----

<1> Index is calculated by comparing a Series of names with DataFrame column of first names.

----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

=== Head and Tail

When you only need the "first N" or "last M" rows of a DataFrame (or values of a Series) you can use `head` and `tail`
operations. Here is how to get the top 2 rows of a DataFrame:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=headDataFrame]
----
<1> Returns a new DataFrame with two top rows of the original DataFrame.

----
first  last
------ ---------
Jerry  Cosin
Amanda Gabrielly
2 rows x 2 columns
----

`tail` works similarly, but returns the _last_ N rows:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/SelectingExample.java[tags=tailDataFrame]
----
----
first last
----- ------
Joan  O'Hara
1 row x 2 columns
----

`Series` also define `head(..)` and `tail(..)` operations that do what you'd expect from them, returning first or last N
values.

NOTE: Unlike index operations on arrays and lists in Java, `head(..)` and `tail(..)` are safe in regards to bounds
checking. They DO NOT throw exceptions when the length parameter is bigger than DataFrame height (or Series size),
returning an empty DataFame (or Series) instead.

