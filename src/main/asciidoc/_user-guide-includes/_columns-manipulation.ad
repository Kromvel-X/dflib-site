[#column-manipulation]
== Columns Manipulation

<<selecting,Selecting>> rows and columns, described in the previous chapter, helps to produce a desired subset of
data. Here we'll demonstrate a few extra methods for DataFrame columns manipulation:

* Adding columns with new data, that may or may not be derived from the data in other DataFrame columns.
* Renaming columns
* Normalizing column data and converting it to a specific Java type

=== Adding Columns

There are a few ways to add columns to a DataFrame. A rather common case is adding a column by calculating cell values
based on data from other columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=addColumn]
----

<1> Expression producing the column by concatenating values of other columns
<2> "as" sets the name of the final expression, which will be the name of the new column

The same can be done using a lambda instead of an expression (though the Expression API should be preferred) :

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=addColumnFromRow]
----

<1> New column name
<2> Operation to produce values for the new column from the existing row. `r` is a special `RowProxy` object,
providing access to the row being processed.

Multiple columns can be added in a single method call:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=addColumns]
----

----
first   last      last_initial first_initial
------ --------- ------------ -------------
Jerry  Cosin     C            J
Amanda Gabrielly G            A
Joan   O'Hara    O            J
3 rows x 4 columns
----

If you have a Series object of the size matching the DataFrame height, it can be added as a
column. E.g. we can add a column that will number DataFrame rows:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=addColumnFromSeries]
----
<1> `IntSequenceSeries` is a special Series that produces a sequence of numbers in the specified range
----
first   last      number
------ --------- ------
Jerry  Cosin          1
Amanda Gabrielly      2
Joan   O'Hara         3
3 rows x 3 columns
----

For this particular task (adding row numbers) there's a shortcut that does the same thing as the code above:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=addRowNumbers]
----

=== Renaming Columns

Often DataFrames come from external sources (like CSV files or database tables) with column names requiring further
cleanup to match the expectations of the application. There are a number of ways to rename columns:

* Rename individual columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=renameColumn]
----

----
first_name last_name
---------- ---------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Specify the new names of _all_ columns at once. This may not be practical for a large number of columns:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=renameColumns]
----

----
first_name last_name
---------- ---------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Rename using a map of old names to new names. Names not present in the map will remain unchanged:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=renameColumns_Map]
----

----
first_name last
---------- ------
Jerry      Cosin
Joan       O'Hara
2 rows x 2 columns
----

* Rename using a function, applied to all column names in turn. This is useful e.g. to convert all names to lower case:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=renameColumns_ToLowerCase]
----

----
first last
----- ------
Jerry Cosin
Joan  O'Hara
2 rows x 2 columns
----

[#transforming-columns]
=== Transforming Columns

A column in a DataFrame can be transformed in various ways. The most generic transformation method is `replaceColumn(..)`,
allowing to apply an expression to the entire DataFrame, and then replace an existing column with the result. E.g. here
is how to perform type conversions on a column:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=replaceColumn]
----

==== Compacting Columns

A special kind of column transformations is converting Strings and Numbers to primitive values:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ColumnsManipulationTest.java[tags=compact]
----

<1> The second method argument is the primitive value to use if the value being converted is null

NOTE: `compactInt(..)`, `compactDouble(..)` and other similar methods are not just syntactic sugar. They convert
DataFrame columns to _primitive_ Series, that take significantly less memory (hence, the name "compact") and compute
most operations faster than Object-based Series. So you should consider using them where possible.