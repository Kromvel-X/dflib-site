[#expressions]
== Expressions

DFLib includes a built-in expression language (implemented as a Java "DSL"). It allows to manipulate columns and rows
in DataFrames and data in Series. `Exp` is the interface representing an expression that takes a DataFrame or a
Series and produces a Series of the specified type. It also provides an entry point to create expressions via its static
factory methods.

To use expressions, you'd start by adding a static import of the `Exp` interface, so that all its factory methods
are available directly in the code:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ExpTest.java[tags=expImport]
----
Now let's create two simple expressions that return a named and a positional column of the requested type:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ExpTest.java[tags=columnExp]
----

And now let's evaluate the expressions:
[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ExpTest.java[tags=columnExpEval]
----

This doesn't look like much (other DFLib APIs would do the same), but this basic abstraction allows to implement a
wide range of operations (filtering, sorting, aggregation, etc). The following chapters will demonstrate various use
cases for expressions.

NOTE: DFLib expression language Expressions work on DFLib data structures instead of individual values, so they can
achieve the best possible performance for any given operation. Expressions should be a preferred way to manipulate your
data instead more "direct" API.

Now let's look at various types of expressions...

=== Column Expressions

`$str(..)` and `$decimal(..)` expressions in the example above are the column lookup expressions. They return a DataFrame
column with a given name or at a given (zero-based) position without applying any transformations to the data.

NOTE: So what is returned when you evaluate a column expression with a Series object? Series can be thought of as a
single (unnamed) column. So a column expression simply returns the Series unchanged, ignoring implied column
name or position.

Factory methods for column expressions are easy to spot in the `Exp` interface - they all start with a dollar sign.
Return type of the column expression is implied from the method name (`$str` produces a `Series<String>`, `$decimal` -
`Series<BigDecimal>`, `$int` - `Series<Integer>` and so on).

NOTE: As of v0.11 DFLib doesn't do any type conversion in the original column data (the exception being `$bool`). So you
need to select the right type in your code to avoid ClassCastExceptions downstream. This may change in the future.

=== Complex Expressions

Expressions can be composed of other expressions by invoking static methods of `Exp` and type-specific instance
methods of various `Exp` subclasses. E.g.:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ExpTest.java[tags=expChain]
----

=== Numeric Expressions

TODO

=== Date Expressions

TODO

=== Conditions

TODO

[#sorter]
=== Sorters

`Sorter` is a special object, that allows to <<sort,sort DFLib data structures>>. Internally a Sorter is using an
expression to retrieve values that comprise sorting criteria and index them in the specified order. Sorter can be
created from any expression by calling its `asc()` or `desc()` methods:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/ExpTest.java[tags=sorter]
----

NOTE: DFLib would allow you to create a Sorter based on any expression type. In runtime the actual type must be
either a Java primitive or an instance of `Comparable`, or a ClassCastException will be thrown during sorting.

