[#joins]
== Joins

If you worked with relational databases, you know what "joins" are. This is a way to combine related rows from
multiple tables. DataFrames can be joined together, just like two DB tables. DFLib provides 4 familiar flavors of joins:
`inner`, `left` (outer), `right` (outer) and `full` (outer).

=== Inner Joins

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=join]
----
<1> `join(..)` is equivalent to `innerJoin(..)` (just like in SQL). With "inner" semantics, only the matching rows that
are present in both DataFrames will be included in the result below.
<2> Columns used in the join criteria have the same name in both DataFrames, so we can specify the name of the join column
only once. In general, the names do not need to match, and multiple columns can participate in a join.
----
id name    id_ age
-- ------- --- ---
 2 Juliana   2  25
 3 Joan      3  59
----

=== Column Namespace

Notice how DFLib treated the `id` column in the join result above. Since it was present in both left and right DataFrames,
it was included in the result twice, but the second instance was renamed to `id_` to avoid a naming collision. The same
renaming would occur for any other columns from the right DataFrame that have conflicting names with the columns from
the left. A quick way to get rid of duplicate columns is to exclude them from the result using the name pattern:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=joinNoDupeColumns]
----
----
id name    age
-- ------- ---
 2 Juliana  25
 3 Joan     59
----

NOTE: You may have noticed that `colsExcept(..).select()` style of picking join columns is very similar to the
<<column_ops,column set API>>. The main difference is that the `Join` object itself represents a special form of column
set, and only "select" operations are available.

For better clarity, you can assign names to the left and/or the right DataFrames just before the join, and the
column names in the result will be prefixed with the corresponding `DataFrame` name, thus avoiding the trailing underscore:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=joinAs]
----
<1> Assign the name to the left DataFrame
<2> Assign the name to the right DataFrame

This makes it easier to identify the origin of each column.
----
L.id L.name  R.id R.age
---- ------- ---- -----
   2 Juliana    2    25
   3 Joan       3    59
----

NOTE: `DataFrame` immutability applies to name assignments as well. Calling `.as()` creates a separate
`DataFrame`, so the original one remains unnamed.

=== Transform Columns

When building the join result, you can apply expressions to alter the existing columns or create new columns all
together:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=selectExp]
----

----
name    retires_soon
------- ------------
Juliana        false
Joan            true
----

NOTE: In the context of a join, column expressions can reference either short column names of left and right
DataFrames, or the fully qualified ones with the prefix. In the former case, the names should take into account  the "_"
suffix applied to the right `DataFrame` columns when their names overlap with column names on the left.

=== Outer Joins

Now let's demonstrate outer joins. Here is a `leftJoin(..)` example using the same left and right DataFrames:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=leftJoin]
----
----
id name     id_  age
-- ------- ---- ----
 1 Jerry   null null
 2 Juliana    2   25
 3 Joan       3   59
----

It has all the rows from the left DataFrame, and only the matching rows from the right DataFrame. For left rows with no
matching right rows, the right columns are filled with `null`.

=== Indicator Column

Join API allows to explicitly identify which rows had a match, and which didn't by adding a special "indicator" column.
Let's show it on a `fullJoin(..)` example:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=indicatorColumn]
----
<1> Request an indicator column with a user-specified name.
----
  id name     age join_type
---- ------- ---- ----------
   1 Jerry   null left_only
   2 Juliana   25 both
   3 Joan      59 both
null null      40 right_only
----
The `join_type` column will contain a special enum of `org.dflib.join.JoinIndicator` type that allows to categorize rows
in the produced DataFrame.

NOTE: indicator column can be requested for all join types, but it is only useful for the three outer joins (it will
always be `both` for inner joins).

=== Nested Loop Joins
The joins we've seen so far were all based on comparing left and right column values. They are knows as "hash joins",
and are usually as fast as joins can get. However, they can not express every possible condition, and sometimes we have
to resort to another kind of joins - "nested loop", that would compare every row from the left DataFrame to every row
from the right. For instance, let's join a DataFrame of salaries with itself to produce pairs of names - a person with
higher salary on the left vs. everyone with lower salary on the right:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/JoinsTest.java[tags=predicatedBy]
----
<1> Custom join condition
<2> Sorting and renaming the result columns for a user-friendly display
----
makes_more makes_less
---------- ----------
Jerry      Joan
Jerry      Juliana
Joan       Juliana
Juliana    null
----

NOTE: Nested loop joins are _much_ slower, and should be avoided unless absolutely necessary.


