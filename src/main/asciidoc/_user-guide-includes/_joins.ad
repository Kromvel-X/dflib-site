[#joins]
== Joins

If you worked with relational databases before, you know what "joins" are. This is a way to combine related rows from
multiple tables. DataFrames can be joined together, just like two DB tables. DFLib provides 4 familiar flavors of joins:
`inner`, `left` (outer), `right` (outer) and `full` (outer).

=== Inner Join

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/JoinsTest.java[tags=join]
----
<1> Since we used `innerJoin()`, only the rows that are present in both DataFrames will be included in the result below.
<2> Columns used in the join criteria have the same name in both DataFrames, so we can specify the name of the join column
only once. In general, the names do not need to match, and multiple columns can participate in a join.
----
id name    id_ age
-- ------- --- ---
 2 Juliana   2  25
 3 Joan      3  30
2 rows x 4 columns
----
Notice how DFLib treats the `id` column in the join result. Since it is present in both left and right DataFrames, it
is included in the result twice, but the second column is renamed to `id_` to avoid a naming collision. The same renaming
would occur for any other columns from the right DataFrame that have conflicting names with the columns from the left.
A quick way to get rid of duplicate columns is to drop them by the name pattern:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/JoinsTest.java[tags=joinNoDupeColumns]
----
----
id name    age
-- ------- ---
 2 Juliana  25
 3 Joan     30
2 rows x 3 columns
----

=== Outer Joins

Now let's demonstrate outer joins. Here is a `leftJoin(..)` example using the same left and right DataFrames:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/JoinsTest.java[tags=leftJoin]
----
----
id name     id_  age
-- ------- ---- ----
 1 Jerry   null null
 2 Juliana    2   25
 3 Joan       3   30
3 rows x 4 columns
----

It has all the rows from the left DataFrame, and only the matching rows from the right DataFrame. For left rows with no
matching right rows, the right columns are filled with `null`.

=== Indicator Column

Join API allows to explicitly identify which rows had a match, and which didn't by adding a special "indicator" column.
Let's show it on a `fullJoin(..)` example:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/JoinsTest.java[tags=indicatorColumn]
----
<1> Request an indicator column with a custom name.
----
  id name     age join_type
---- ------- ---- ----------
   1 Jerry   null left_only
   2 Juliana   25 both
   3 Joan      30 both
null null      40 right_only
4 rows x 4 columns
----
The "join_type" column will contain a special enum `com.nhl.dflib.join.JoinIndicator` that allows to categorize rows
in the produced DataFrame. Note that indicator column can be used with all join types, but it is only useful for the
three outer joins.

=== Nested Loop Joins
The joins we've seen so far were all based on comparing left and right column values. They are knows as "hash joins",
and are usually fast and efficient. However, they can not express every possible join condition, and sometimes we have
to resort to "nested loop" joins that compare every row from the left DataFrame to every row from the right. Such
joins are much slower, and should be avoided unless absolutely necessary. For instance, let's join a DataFrame of
salaries with itself to produce pairs of names - a person with higher salary on the left vs. everyone with lower salary
on the right:

[source,java,indent=0]
----
include::../../../test/java/com/nhl/dflib/docs/JoinsTest.java[tags=predicatedBy]
----
<1> Custom join condition
<2> Sorting and renaming the result columns for more user-friendly display
----
makes_more makes_less
---------- ----------
Jerry      Joan
Jerry      Juliana
Joan       Juliana
Juliana    null
4 rows x 2 columns
----


